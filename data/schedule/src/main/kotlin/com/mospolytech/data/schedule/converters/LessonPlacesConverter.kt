package com.mospolytech.data.schedule.converters

import com.mospolytech.data.schedule.model.ApiLesson
import com.mospolytech.domain.schedule.model.place.Place
import io.ktor.util.*
import kotlin.text.isLowerCase

object LessonPlacesConverter {


    fun convertPlaces(auditoriums: List<ApiLesson.Auditory>, url: String = ""): List<Place> {

        return auditoriums.map { processAuditorium(it.title, url) }
    }
}

//val Place.isOnline: Boolean
//    get() =
//        url.isNotEmpty() ||
//                (AuditoriumTypes.values()
//                    .firstOrNull { it.type == type }?.isOnline
//                    ?: false)

enum class AuditoriumTypes(val type: String, val isOnline: Boolean) {
    Webinar("–í–µ–±–∏–Ω–∞—Ä", true),
    Lms("LMS", true),
    VideoConference("–í–∏–¥–µ–æ–∫–æ–Ω—Ñ.", true),
    Other("", false)
}
private val regex = Regex("""href="(.*?)".*?>(.*?)<""")


fun processAuditorium(auditorium: String, url: String): Place {
    val regGroups = regex.find(auditorium)?.groupValues
    val (url, rawTitle0) = if (regGroups != null)
        regGroups.getOrNull(1) to regGroups.getOrNull(2)
    else
        null to null

    val parsedHtml = rawTitle0 ?: auditorium
    val rawTitle = parsedHtml.trim()
        .replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() }
    val (rawTitle2, type) = parseEmoji(rawTitle)
    val title = processTitle(rawTitle2)

    val url2 = ""

    return Place(
        title.encodeBase64(),
        title,
        getPlaceDescription(title)
//        type,
//        if (url.isEmpty()) url2 else url
    )
}

private fun processTitle(raw: String): String {
    return raw.trim('_')
}

private val emojis = listOf(
    "\uD83D\uDCF7" to "–í–µ–±–∏–Ω–∞—Ä",    // üì∑
    "\uD83C\uDFE0" to "LMS",    // üè†
    "\uD83D\uDCBB" to "–í–∏–¥–µ–æ–∫–æ–Ω—Ñ."  // üíª
)

fun parseEmoji(raw: String): Pair<String, String> {
    val emoji = emojis.firstOrNull { raw.contains(it.first) }
    return if (emoji == null)
        Pair(raw.trim(), "")
    else
        Pair(raw.replace(emoji.first, "").trim(), emoji.second)
}

fun getPlaceDescription(title: String): String {
    for (pair in audMap) {
        val regex = Regex(pair.key, RegexOption.IGNORE_CASE)
        if (regex.containsMatchIn(title)) {
            return regex.replace(title, pair.value)
        }
    }
    return title
}

private val audMap = mapOf(
    """^–∞–≤\s*((\d)(\d)(.+))$""" to """–ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–∞—è, –∫. $2, —ç—Ç–∞–∂ $3, –∞—É–¥. $1""",

    """^–ø—Ä\s*((\d)(\d).+)$""" to """–ü—Ä—è–Ω–∏—à–Ω–∏–∫–æ–≤–∞, –∫. $2, —ç—Ç–∞–∂ $3, –∞—É–¥. $1""",
    """^–ø—Ä\s*–í–¶\s*\d+\s*\(((\d)(\d).+)\)$""" to """–ü—Ä—è–Ω–∏—à–Ω–∏–∫–æ–≤–∞, –∫. $2, —ç—Ç–∞–∂ $3, –∞—É–¥. $1""",
    """^–ø—Ä\s(–§–û[\s-]*\d+)$""" to """–ü—Ä—è–Ω–∏—à–Ω–∏–∫–æ–≤–∞, –∫. 2, —ç—Ç–∞–∂ 4, –∞—É–¥. $1""",

    """^–º\s*((\d)(\d).+)$""" to """–ú–∏—Ö–∞–ª–∫–æ–≤—Å–∫–∞—è, –∫. $2, —ç—Ç–∞–∂ $3, –∞—É–¥. $1""",

    """^(\d)–ø–∫\s*((\d).+)$""" to """–ü–∞–≤–ª–∞ –ö–æ—Ä—á–∞–≥–∏–Ω–∞, –∫. $1, —ç—Ç–∞–∂ $3, –∞—É–¥. $2""",
    """^–ø–∫\s*((\d).+)$""" to """–ü–∞–≤–ª–∞ –ö–æ—Ä—á–∞–≥–∏–Ω–∞, –∫. 1, —ç—Ç–∞–∂ $2, –∞—É–¥. $1""",

    """^([–ê–ë–í–ùH]|–ù–¥)\s*(\d).+$""" to """–ë. –°–µ–º—ë–Ω–æ–≤—Å–∫–∞—è, –∫. $1, —ç—Ç–∞–∂ $2, –∞—É–¥. $0""",
    """^(–ê)[\s-]?–û–ú–î$""" to """–ë. –°–µ–º—ë–Ω–æ–≤—Å–∫–∞—è, –∫. $1, –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–∞–≤–ª–µ–Ω–∏–µ–º""",

    """^[_]*–ü–î[_]*$""" to """–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å""",

    """^[_-]*(LMS|–õ–ú–°)[_-]*$""" to """–û–±—É—á–µ–Ω–∏–µ –≤ –õ–ú–°""",
    """^–û–±—É—á–µ–Ω–∏–µ\s+–≤\s+LMS$""" to """–û–±—É—á–µ–Ω–∏–µ –≤ –õ–ú–°""",
    """^Webex$""" to """–í–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –≤ Webex""",
    """^Webinar$""" to """–û–Ω–ª–∞–π–Ω –ª–µ–∫—Ü–∏—è –≤ Webinar""""",

    """^–º[\s\p{P}]*—Å–ø–æ—Ä—Ç[\s\p{P}]*–∑–∞–ª[\p{P}]*$""" to """–ú–∏—Ö–∞–ª–∫–æ–≤—Å–∫–∞—è, –°–ø–æ—Ä—Ç–∑–∞–ª""",
    """^–ó–∞–ª\s+‚Ññ*(\d)[_]*$""" to """–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª ‚Ññ$1""",
    """^–ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–∞—è\s+(\d)$""" to """–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª ‚Ññ$1 (–ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–∞—è)""",
    """^(.*–ò–∑–º–∞–π–ª–æ–≤–æ.*)$""" to """$1""",

    """^–ò–ú–ê–®(\s–†–ê–ù)?[\s_]*$""" to """–ò–Ω—Å—Ç–∏—Ç—É—Ç –º–∞—à–∏–Ω–æ–≤–µ–¥–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ê. –ê. –ë–ª–∞–≥–æ–Ω—Ä–∞–≤–æ–≤–∞ –†–ê–ù""",
    """^–ò–û–ù–•(\s–†–ê–ù)?[\s_]*$""" to """–ò–Ω—Å—Ç–∏—Ç—É—Ç –æ–±—â–µ–π –∏ –Ω–µ–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Ö–∏–º–∏–∏ –∏–º. –ù.–°. –ö—É—Ä–Ω–∞–∫–æ–≤–∞ –†–ê–ù""",
    """^(.*–ë–∏–æ–∏–Ω–∂–µ–Ω–µ—Ä–∏–∏.*(–†–ê–ù)?)$""" to """$1""",
    """^(.*–¢–µ—Ö–Ω–æ–≥—Ä–∞–¥.*)$""" to """–¢–µ—Ö–Ω–æ–≥—Ä–∞–¥ –Ω–∞ –í–î–ù–•""",
    """^–ú–ò–°–∏–°$""" to """–ù–ò–¢–£ –ú–ò–°–∏–°""",

    """^–ü—Ä–∞–∫—Ç–∏–∫–∞$""" to """–ü—Ä–∞–∫—Ç–∏–∫–∞""",
    """^–ë–∏–∑–Ω–µ—Å.–∫–∞—Ä$""" to """–ì—Ä—É–ø–ø–∞ –∫–æ–º–ø–∞–Ω–∏–π ¬´–ë–ò–ó–ù–ï–° –ö–ê–†¬ª""",
)