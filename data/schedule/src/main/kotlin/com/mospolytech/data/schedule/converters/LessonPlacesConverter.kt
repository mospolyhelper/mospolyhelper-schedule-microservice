package com.mospolytech.data.schedule.converters

import com.mospolytech.data.schedule.model.ApiLesson
import com.mospolytech.domain.base.model.Location
import com.mospolytech.domain.base.utils.capitalized
import com.mospolytech.domain.schedule.model.place.PlaceInfo
import com.mospolytech.domain.schedule.repository.PlacesRepository

class LessonPlacesConverter(
    private val placesRepository: PlacesRepository
) {
    fun convertPlaces(auditoriums: List<ApiLesson.Auditory>, url: String = ""): List<PlaceInfo> {
        return auditoriums.map { processAuditorium(it.title, url) }
    }

    private val regex = Regex("""href="(.*?)".*?>(.*?)<""")


    private fun processAuditorium(auditorium: String, url: String): PlaceInfo {
        val regGroups = regex.find(auditorium)?.groupValues
        val (url2, rawTitle0) = if (regGroups != null)
            regGroups.getOrNull(1) to regGroups.getOrNull(2)
        else
            null to null

        val parsedHtml = rawTitle0 ?: auditorium
        val rawTitle = parsedHtml.trim()
            .replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() }
        val (rawTitle2, type) = parseEmoji(rawTitle)
        val title = processTitle(rawTitle2)

        val finalUrl = url.ifEmpty { url2 ?: "" }

        return parsePlace(title, finalUrl)
    }

    private fun processTitle(raw: String): String {
        return fixTitle(raw.trim('_', '-'))
    }

    private fun fixTitle(raw: String): String {
        return when (raw) {
            "3301–∞" -> "–ú3301–∞"
            "2202–∞" -> "–ü—Ä2202–∞"
            else -> raw
        }
    }

    private val emojis = listOf(
        "\uD83D\uDCF7" to "–í–µ–±–∏–Ω–∞—Ä",    // üì∑
        "\uD83C\uDFE0" to "LMS",    // üè†
        "\uD83D\uDCBB" to "–í–∏–¥–µ–æ–∫–æ–Ω—Ñ.", // üíª
        "\uD83C\uDF10" to "Online –∫—É—Ä—Å", // üåê
    )

    private fun parseEmoji(raw: String): Pair<String, String> {
        val emoji = emojis.firstOrNull { raw.contains(it.first) }
        return if (emoji == null)
            raw.trim() to ""
        else
            raw.replace(emoji.first, "").trim() to emoji.second
    }

    private fun parsePlace(place: String, url: String = ""): PlaceInfo {
        return parserChain.firstNotNullOfOrNull {
            val matchResult = place.parseBy(patterns = it.patterns.toTypedArray())
            if (matchResult == null)
                null
            else
                it.placeFactory(matchResult, listOf(url))
        } ?: placesRepository.addUnclassified(place)
    }


    data class PlaceParserPack(
        val patterns: List<String>,
        val placeFactory: MatchResult.(List<String>) -> PlaceInfo
    ) {
        constructor(vararg patterns: String, placeFactory: MatchResult.(List<String>) -> PlaceInfo) :
                this(patterns.toList(), placeFactory)
    }

    private val otherMap = mapOf(
        """^–ò–ú–ê–®(\s–†–ê–ù)?[\s_\.]*$""" to """–ò–Ω—Å—Ç–∏—Ç—É—Ç –º–∞—à–∏–Ω–æ–≤–µ–¥–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ê. –ê. –ë–ª–∞–≥–æ–Ω—Ä–∞–≤–æ–≤–∞ –†–ê–ù""",
        """^–ò–û–ù–•(\s–†–ê–ù)?[\s_]*$""" to """–ò–Ω—Å—Ç–∏—Ç—É—Ç –æ–±—â–µ–π –∏ –Ω–µ–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Ö–∏–º–∏–∏ –∏–º. –ù.–°. –ö—É—Ä–Ω–∞–∫–æ–≤–∞ –†–ê–ù""",
        """^(.*–ë–∏–æ–∏–Ω–∂–µ–Ω–µ—Ä–∏–∏.*(–†–ê–ù)?)$""" to """$1""",
        """^(.*–¢–µ—Ö–Ω–æ–≥—Ä–∞–¥.*)$""" to """–¢–µ—Ö–Ω–æ–≥—Ä–∞–¥ –Ω–∞ –í–î–ù–•""",
        """^–ú–ò–°–∏–°$""" to """–ù–ò–¢–£ –ú–ò–°–∏–°""",

        """^–ü—Ä–∞–∫—Ç–∏–∫–∞$""" to """–ü—Ä–∞–∫—Ç–∏–∫–∞""",
        """^–ë–∏–∑–Ω–µ—Å.–∫–∞—Ä$""" to """–ì—Ä—É–ø–ø–∞ –∫–æ–º–ø–∞–Ω–∏–π ¬´–ë–ò–ó–ù–ï–° –ö–ê–†¬ª""",
    )

    private val parserChain = listOf(
        PlaceParserPack("""^–∞–≤\s*((\d)(\d)(.+))$""") {
            placesRepository.addBuilding(
                title = groupValues[0],
                areaAlias = "–ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–∞—è",
                street = "–ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–∞—è —É–ª–∏—Ü–∞, 16",
                building = groupValues[2],
                floor = groupValues[3],
                auditorium = groupValues[1],
                location = when (groupValues[2]) {
                    "1" -> Location(55.704191, 37.645163)
                    "2" -> Location(55.704561, 37.645704)
                    "3" -> Location(55.704839, 37.646956)
                    "4" -> Location(55.704452, 37.646639)
                    "5" -> Location(55.705504, 37.646804)
                    "6" -> Location(55.704282, 37.646083)
                    else -> null
                }
            )
        },
        PlaceParserPack("""^–ø—Ä\s*((\d)(\d).+)$""") {
            placesRepository.addBuilding(
                title = groupValues[0],
                areaAlias = "–ü—Ä—è–Ω–∏—à–Ω–∏–∫–æ–≤–∞",
                street = "—É–ª–∏—Ü–∞ –ü—Ä—è–Ω–∏—à–Ω–∏–∫–æ–≤–∞, 2–ê",
                building = groupValues[2],
                floor = groupValues[3],
                auditorium = groupValues[1],
                location = when (groupValues[2]) {
                    "1" -> Location(55.833268, 37.544180)
                    "2" -> Location(55.833708, 37.543758)
                    else -> null
                }
            )
        },
        PlaceParserPack("""^–ø—Ä\s*–í–¶\s*\d+\s*\(((\d)(\d).+)\)$""") {
            val building = groupValues[2]

            placesRepository.addBuilding(
                title = groupValues[0],
                areaAlias = "–ü—Ä—è–Ω–∏—à–Ω–∏–∫–æ–≤–∞",
                street = "—É–ª–∏—Ü–∞ –ü—Ä—è–Ω–∏—à–Ω–∏–∫–æ–≤–∞, 2–ê",
                building = building,
                floor = groupValues[3],
                auditorium = groupValues[1],
                location = when (building) {
                    "1" -> Location(55.833268, 37.544180)
                    "2" -> Location(55.833708, 37.543758)
                    else -> null
                }
            )
        },
        PlaceParserPack("""^–ø—Ä\s(–§–û[\s-]*\d+)$""") {
            placesRepository.addBuilding(
                title = groupValues[0],
                areaAlias = "–ü—Ä—è–Ω–∏—à–Ω–∏–∫–æ–≤–∞",
                street = "—É–ª–∏—Ü–∞ –ü—Ä—è–Ω–∏—à–Ω–∏–∫–æ–≤–∞, 2–ê",
                building = "2",
                floor = "4",
                auditorium = groupValues[1],
                location = Location(55.833708, 37.543758)
            )
        },
        PlaceParserPack("""^–º\s*((\d)(\d).+)$""") {
            val building = groupValues[2]

            placesRepository.addBuilding(
                title = groupValues[0],
                areaAlias = "–ú–∏—Ö–∞–ª–∫–æ–≤—Å–∫–∞—è",
                street = "–ú–∏—Ö–∞–ª–∫–æ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞, 7",
                building = building,
                floor = groupValues[3],
                auditorium = groupValues[1],
                location = when (building) {
                    "3" -> Location(55.837459, 37.533427)
                    else -> null
                }
            )
        },
        PlaceParserPack("""^–º\s*(—ç—Å—Ç–∞–º–ø)$""") {
            placesRepository.addBuilding(
                title = groupValues[0],
                areaAlias = "–ú–∏—Ö–∞–ª–∫–æ–≤—Å–∫–∞—è",
                street = "–ú–∏—Ö–∞–ª–∫–æ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞, 7",
                location = Location(55.837131, 37.533649)
            )
        },
        PlaceParserPack("""^(\d)–ø–∫\s*((\d).+)$""") {
            val building = groupValues[1]

            placesRepository.addBuilding(
                title = groupValues[0],
                areaAlias = "–ü–∞–≤–ª–∞ –ö–æ—Ä—á–∞–≥–∏–Ω–∞",
                street = "—É–ª–∏—Ü–∞ –ü–∞–≤–ª–∞ –ö–æ—Ä—á–∞–≥–∏–Ω–∞, 22",
                building = building,
                floor = groupValues[3],
                auditorium = groupValues[2],
                location = when (building) {
                    "1" -> Location(55.819439, 37.663351)
                    "2" -> Location(55.819287, 37.664276)
                    else -> null
                }
            )
        },
        PlaceParserPack("""^–ø–∫\s*((\d).+)$""") {
            placesRepository.addBuilding(
                title = groupValues[0],
                areaAlias = "–ü–∞–≤–ª–∞ –ö–æ—Ä—á–∞–≥–∏–Ω–∞",
                street = "—É–ª–∏—Ü–∞ –ü–∞–≤–ª–∞ –ö–æ—Ä—á–∞–≥–∏–Ω–∞, 22",
                building = "1",
                floor = groupValues[2],
                auditorium = groupValues[1],
                location = Location(55.819439, 37.663351)
            )
        },
        PlaceParserPack("""^([–ê–ë–í–ùH]|–ù–¥)\s*(\d).+$""") {
            val building = groupValues[1].replace('H', '–ù').lowercase().capitalized()

            placesRepository.addBuilding(
                title = groupValues[0],
                areaAlias = "–ë. –°–µ–º—ë–Ω–æ–≤—Å–∫–∞—è",
                street = "–ë–æ–ª—å—à–∞—è –°–µ–º—ë–Ω–æ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞, 38",
                building = building,
                floor = groupValues[2],
                auditorium = groupValues[0],
                location = when (building) {
                    "–ê" -> Location(55.781310, 37.711513)
                    "–ë" -> Location(55.781074, 37.712677)
                    "–í" -> Location(55.781428, 37.710494)
                    "–ù" -> Location(55.780930, 37.709807)
                    "–ù–¥" -> Location(55.780300, 37.709753)
                    "–õ" -> Location(55.781164, 37.710555)
                    else -> null
                }
            )
        },
        PlaceParserPack("""^(–ê)[\s-]?–û–ú–î$""") {
            val building = groupValues[1].lowercase().capitalized()

            placesRepository.addBuilding(
                title = groupValues[0],
                areaAlias = "–ë. –°–µ–º—ë–Ω–æ–≤—Å–∫–∞—è",
                street = "–ë–æ–ª—å—à–∞—è –°–µ–º—ë–Ω–æ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞, 38",
                building = building,
                floor = groupValues[1],
                auditorium = "–ê –û–ú–î",
                location = when (building) {
                    "–ê" -> Location(55.781310, 37.711513)
                    "–ë" -> Location(55.781074, 37.712677)
                    "–í" -> Location(55.781428, 37.710494)
                    "–ù" -> Location(55.780930, 37.709807)
                    "–ù–¥" -> Location(55.780300, 37.709753)
                    "–õ" -> Location(55.781164, 37.710555)
                    else -> null
                },
                description = mapOf("" to "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–∞–≤–ª–µ–Ω–∏–µ–º")
            )
        },
        PlaceParserPack("""^–ó–∞–ª\s+‚Ññ*(\d)[_]*$""") {
            val gymNumber = groupValues[1]

            // –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª ‚Ññ1 —É–ª. –ë–æ–ª—å—à–∞—è –°–µ–º–µ–Ω–æ–≤—Å–∫–∞—è, 38, –ø–æ–º. 112–∞
            // –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª ‚Ññ2 —É–ª. –°–µ–º–µ–Ω–æ–≤—Å–∫–∞—è, 38, –∫–æ—Ä–ø—É—Å –ë, —Ü–æ–∫–æ–ª—å–Ω—ã–π —ç—Ç–∞–∂
            // –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª ‚Ññ3 —É–ª. –ú–∞–ª–∞—è –°–µ–º–µ–Ω–æ–≤—Å–∫–∞—è, 12
            // –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª ‚Ññ4 —É–ª. –ü–∞–≤–ª–∞ –ö–æ—Ä—á–∞–≥–∏–Ω–∞, 22, –∞—É–¥.103
            // –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª ‚Ññ5 —É–ª. –ü–∞–≤–ª–∞ –ö–æ—Ä—á–∞–≥–∏–Ω–∞, 22, –∞—É–¥.102
            // –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª ‚Ññ6 —É–ª. –ë–æ—Ä–∏—Å–∞ –ì–∞–ª—É—à–∫–∏–Ω–∞, 9, 2 —ç—Ç–∞–∂
            // –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª ‚Ññ7 —É–ª. –ü–∞–≤–ª–∞ –ö–æ—Ä—á–∞–≥–∏–Ω–∞, 22, –ø–æ–º. No519
            // –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª ‚Ññ9 —É–ª. –ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–∞—è, 16, —Å—Ç—Ä. 3, —ç—Ç–∞–∂ 5, –∞—É–¥. 3501

            val location = when (gymNumber) {
                "1" -> Location(55.837495, 37.532223)
                "2" -> Location(55.781074, 37.712677)
                "3" -> Location(55.819287, 37.664276)
                "4" -> Location(55.819287, 37.664276)
                "5" -> Location(55.819287, 37.664276)
                "6" -> Location(55.819287, 37.664276)
                "7" -> Location(55.819287, 37.664276)
                "9" -> Location(55.819287, 37.664276)
                else -> null
            }

            val street = when (gymNumber) {
                "1" -> "–ë–æ–ª—å—à–∞—è –°–µ–º—ë–Ω–æ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞, 38"
                "2" -> "–ë–æ–ª—å—à–∞—è –°–µ–º—ë–Ω–æ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞, 38"
                "3" -> "–ú–∞–ª–∞—è –°–µ–º—ë–Ω–æ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞, 12"
                "4" -> "—É–ª–∏—Ü–∞ –ü–∞–≤–ª–∞ –ö–æ—Ä—á–∞–≥–∏–Ω–∞, 22"
                "5" -> "—É–ª–∏—Ü–∞ –ü–∞–≤–ª–∞ –ö–æ—Ä—á–∞–≥–∏–Ω–∞, 22"
                "6" -> "—É–ª–∏—Ü–∞ –ë–æ—Ä–∏—Å–∞ –ì–∞–ª—É—à–∫–∏–Ω–∞, 9"
                "7" -> "—É–ª–∏—Ü–∞ –ü–∞–≤–ª–∞ –ö–æ—Ä—á–∞–≥–∏–Ω–∞, 22"
                "9" -> "–ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–∞—è —É–ª–∏—Ü–∞, 16"
                else -> null
            }

            val description1 = when (gymNumber) {
                "1" -> "–§—É—Ç–±–æ–ª/—Ñ—É—Ç–∑–∞–ª"
                "2" -> "–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª"
                "3" -> "–ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞, —Å–º–µ—à–∞–Ω–Ω—ã–µ –±–æ–µ–≤—ã–µ –µ–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞ (–ú–ú–ê)"
                "4" -> "–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª, –ü–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥, –ö—Ä–æ—Å—Å—Ñ–∏—Ç"
                "5" -> "–ë–æ–∫—Å/–∫–∏–∫–±–æ–∫—Å–∏–Ω–≥"
                "6" -> "–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª, –í–æ–ª–µ–π–±–æ–ª"
                "7" -> "–ö–∞–ø–æ—ç–π—Ä–∞"
                "9" -> "–û–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞"
                else -> null
            }
            val description = if (description1 != null)
                mapOf("–£—á–µ–±–Ω—ã–µ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è" to description1)
            else
                mapOf()

            placesRepository.addBuilding(
                title = "–°–ø–æ—Ä—Ç–∑–∞–ª ‚Ññ${gymNumber}",
                areaAlias = "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª ‚Ññ${gymNumber}",
                street = street,
                location = location,
                description = description
            )
        },
        PlaceParserPack("""^–º[\s\p{P}]*—Å–ø–æ—Ä—Ç[\s\p{P}]*–∑–∞–ª[\p{P}]*$""") {
            placesRepository.addBuilding(
                title = "–ú –°–ø–æ—Ä—Ç–∑–∞–ª",
                areaAlias = "–ú–∏—Ö–∞–ª–∫–æ–≤—Å–∫–∞—è",
                street = "–ú–∏—Ö–∞–ª–∫–æ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞, 7—Å2",
                location = Location(55.837495, 37.532223),
                description = mapOf(
                    "–£—á–µ–±–Ω—ã–µ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è"
                            to
                            "–ó–∞–ª —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä, —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª, –∑–∞–ª—ã –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–≥–æ —Ç–µ–Ω–Ω–∏—Å–∞, " +
                            "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –µ–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤, —Ñ–µ—Ö—Ç–æ–≤–∞–Ω–∏—è, —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–∏"
                )
            )
        },
        PlaceParserPack("""^–ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–∞—è\s+(\d)$""") {
            val gymNumber = groupValues[1]

            placesRepository.addBuilding(
                title = "–ê–≤ –°–ø–æ—Ä—Ç–∑–∞–ª ‚Ññ${gymNumber}",
                areaAlias = "–°–ø–æ—Ä—Ç–∫–æ–º–ø–ª–µ–∫—Å ‚Ññ${gymNumber} ¬´–ù–∞ –ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–æ–π¬ª",
                street = "–ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–∞—è —É–ª–∏—Ü–∞, 16—Å2",
                floor = "8",
                location = Location(55.837495, 37.532223),
                description = mapOf(
                    "–£—á–µ–±–Ω—ã–µ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è"
                            to
                            "–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª, –∞—Ä–º—Ä–µ—Å—Ç–ª–∏–Ω–≥, –∞—Å–∫–µ—Ç–±–æ–ª, –¥–∞—Ä—Ç—Å, –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å, —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞"
                )
            )
        },
        PlaceParserPack("""^–ê–í[\s\p{P}]*–°–ø–æ—Ä—Ç–∑–∞–ª$""") {
            placesRepository.addBuilding(
                title = "–ê–≤ –°–ø–æ—Ä—Ç–∑–∞–ª",
                areaAlias = "–°–ø–æ—Ä—Ç–∫–æ–º–ø–ª–µ–∫—Å ¬´–ù–∞ –ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–æ–π¬ª",
                street = "–ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–∞—è —É–ª–∏—Ü–∞, 16—Å2",
                floor = "8",
                location = Location(55.837495, 37.532223),
                description = mapOf(
                    "–£—á–µ–±–Ω—ã–µ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è"
                            to
                            "–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª, –∞—Ä–º—Ä–µ—Å—Ç–ª–∏–Ω–≥, –∞—Å–∫–µ—Ç–±–æ–ª, –¥–∞—Ä—Ç—Å, –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å, —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞"
                )
            )
        },
        PlaceParserPack("""^(.*–ò–∑–º–∞–π–ª–æ–≤–æ.*)$""") {
            placesRepository.addBuilding(
                title = groupValues[1],
                areaAlias = "–°–ø–æ—Ä—Ç–∫–æ–º–ø–ª–µ–∫—Å ¬´–ò–∑–º–∞–π–ª–æ–≤–æ¬ª",
                street = "11-—è –ü–∞—Ä–∫–æ–≤–∞—è —É–ª–∏—Ü–∞, 36—Å2",
                location = Location(55.800985, 37.806210),
                description = mapOf(
                    "–£—á–µ–±–Ω—ã–µ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è"
                            to
                            "–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª, –≤–æ–ª–µ–π–±–æ–ª, –¥–∞—Ä—Ç—Å, –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å, —Å—Ç–µ–ø-–∞—ç—Ä–æ–±–∏–∫–∞, " +
                            "—Ñ—É—Ç–±–æ–ª/—Ñ—É—Ç–∑–∞–ª (—É–ª–∏—á–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞), —Ñ–∏—Ç–Ω–µ—Å-–∞—ç—Ä–æ–±–∏–∫–∞"
                )
            )
        },
        PlaceParserPack("""^[_\s\.]*–¶?–ü–î[_\s\.\d]*$""", """^–ü—Ä–æ–µ–∫—Ç–Ω–∞—è\s–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å$""") {
            placesRepository.addOther("–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        },
        PlaceParserPack(
            """^[_-]*(LMS|–õ–ú–°)[_-]*$""",
            """^–û–±—É—á–µ–Ω–∏–µ\s+–≤\s+(LMS|–õ–ú–°)$""",
            """^–û–±—É—á–µ–Ω–∏–µ\s+(LMS|–õ–ú–°)$"""
        ) {
            placesRepository.addOnline(
                title = "–û–±—É—á–µ–Ω–∏–µ –≤ –õ–ú–°",
                url = it.firstOrNull()
            )
        },
        PlaceParserPack("""^Webex$""") {
            placesRepository.addOnline(
                title = "–í–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –≤ Webex",
                url = it.firstOrNull()
            )
        },
        PlaceParserPack("""^Webinar$""") {
            placesRepository.addOnline(
                title = "–û–Ω–ª–∞–π–Ω –ª–µ–∫—Ü–∏—è –≤ Webinar",
                url = it.firstOrNull()
            )
        },
        PlaceParserPack("""^Online\s–∫—É—Ä—Å$""") {
            placesRepository.addOnline(
                title = "–û–Ω–ª–∞–π–Ω –∫—É—Ä—Å",
                url = it.firstOrNull()
            )
        },
        PlaceParserPack("""^–û–Ω–ª–∞–π–Ω$""") {
            placesRepository.addOnline(
                title = "–û–Ω–ª–∞–π–Ω –∫—É—Ä—Å",
                url = it.firstOrNull()
            )
        },
        PlaceParserPack(*otherMap.keys.toTypedArray()) {
            val title = this.value

            val description1 = otherMap.toList().firstNotNullOf { (key, value) ->
                val regex = Regex(key, RegexOption.IGNORE_CASE)
                if (regex.containsMatchIn(title))
                    regex.replace(title, value)
                else
                    null
            }

            placesRepository.addOther(
                title = title,
                description = mapOf("" to description1)
            )
        }
    )

    private fun String.parseBy(vararg patterns: String): MatchResult? {
        return patterns.firstNotNullOfOrNull {
            val regex = Regex(it, RegexOption.IGNORE_CASE)
            regex.matchEntire(this)
        }
    }
}